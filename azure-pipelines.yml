# Docker

# Build a Docker image 
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

stages:
- stage: Build
  displayName: Build image
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureIoTEdge@2
      displayName: AzureIoTEdge - Build module images
      inputs:
        action: 'Build module images'
        templateFilePath: 'deployment.template.json'
        defaultPlatform: 'amd64'
    - task: AzureIoTEdge@2
      displayName: AzureIoTEdge - Push module images to ACR
      inputs:
        action: 'Push module images'
        containerregistrytype: 'Azure Container Registry'
        azureSubscriptionEndpoint: 'Microsoft Azure Internal Consumption (eec13245-3684-4b4f-b9f2-28c123079e21)'
        azureContainerRegistry: '{"loginServer":"nickacr.azurecr.io", "id" : "/subscriptions/eec13245-3684-4b4f-b9f2-28c123079e21/resourceGroups/mtcdbegrp/providers/Microsoft.ContainerRegistry/registries/nickacr"}'
        templateFilePath: 'deployment.template.json'
        defaultPlatform: 'amd64'
        fillRegistryCredential: 'true'
    - task: AzureIoTEdge@2
      displayName: AzureIoTEdge - Generate deployment manifest
      inputs:
        action: 'Generate deployment manifest'
        templateFilePath: 'deployment.template.json'
        defaultPlatform: 'amd64'
        deploymentManifestOutputPath: '$(System.DefaultWorkingDirectory)/config/deployment.json'
    - task: CopyFiles@2
      displayName: CopyFiles
      inputs:
        Contents: |
          deployment.template.json
          **/deployment.json
          **/module.json
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'BuildModule'
        publishLocation: 'Container'